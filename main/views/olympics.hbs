
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<script type="text/javascript" src="javascripts/d3.v3.min.js"></script>
</head>

<style>
html { 
  min-width: 1160px;

} 

body { 
  font-family: "Helvetica Neue", Helvetica, sans-serif;
  margin: 1em auto 4em auto;
  position: relative;
  tab-size: 2;
  width: 1060px;
} 

.main {
	width: 1115px;
	overflow: hidden;


}

.thumb_holder {
  
}

/*******************************************************************
TYPOGRAPHY
*******************************************************************/

h1 { 
  font-size: 64px;
  font-weight: 300;
  letter-spacing: -2px;
  margin: .3em 0 .1em 0;
} 

h2 { 
  margin-top: 2em;

} 

h3 { 
   margin: .5em 0 .1em 0;

} 


p { 
  line-height: 1.5em;
} 

a {
  color: steelblue;
}

a:not(:hover) {
  text-decoration: none;
}



/*******************************************************************
TABLES
*******************************************************************/
.twocols {
	width: 300px;
	display: inline-block;
	}

table {
	border-collapse:collapse;
	width: 200px;
	font: 12px sans-serif;
	margin-top: 4px;
	color: #000;
}

th {
	padding-top: 3px;
	padding-bottom: 3px;
	padding-left: 2px;
	padding-right: 2px;
	font-weight: bold;
	font-size: 14px;
	background-color: #f8f8f8;
	}

th,td {
	border: 1px solid #ddd;
	font-size: 11px;
	}
	


td.Year,
td.TotalAdj,
td.predicted,
td.residAdj {
	padding-top: 10px;
	padding-bottom: 10px;
	padding-left: 10px;
	padding-right: 10px;
	font-size: 12px;
	letter-spacing: -1px;
	text-align: center;


	}

td.Gold {
	color: #ffd700;
	padding-top: 10px;
	padding-bottom: 10px;
	padding-left: 5px;
	padding-right: 5px;
	font-size: 12px;
	letter-spacing: -1px;
	text-align: center;
	}

td.Silver {
	color: #cccccc;
	padding-top: 10px;
	padding-bottom: 10px;
	padding-left: 5px;
	padding-right: 5px;
	font-size: 12px;
	letter-spacing: -1px;
	text-align: center;
	}

td.Bronze {
	color: #cd7f32;
	padding-top: 10px;
	padding-bottom: 10px;
	padding-left: 5px;
	padding-right: 5px;
	font-size: 12px;
	letter-spacing: -1px;
	text-align: center;
	}


/*******************************************************************
IMAGES
*******************************************************************/

.thumbnail {
	height: 264px;
	width: 360px;
	display: inline-block;
	}

.index_thumb {
	height: 173px;
	width: 333px;
	display: inline-block;
	border: 2px solid #ddd;
	margin: .3em 0 .5em .5em;

	}

img.index_thumb:hover {
	border: 2px solid steelblue;
	
	}
	
/***************************************************************
STANDARD CSS ABOVE HERE
*******************************************************************/

#bottomtext {
  font: 16px sans-serif;
  float: left;
  width: 750px;
  line-height: 1.5em;
  padding-left: 50px;
  padding-top: 10px;

}


#chart {
  font: 12px sans-serif;
  float: left;
  width: 860px;
}

#hovertable {
  float: right;
  width: 255px;
  margin-top: 50px;
}

p.countrylab {
  font: 18px sans-serif;
  color: #545454;
  margin-top: 12px;
  }

.axis path,
.axis line {
  fill: none;
  shape-rendering: crispEdges;
  }
 
  
.axis text {
  font: 12px sans-serif;
}

.xdummy {
  fill: none;
  stroke: #d3d3d3;
  shape-rendering: crispEdges;
  stroke-width: 1px;
  font-color: #fff;
}

.xdummy text {
  fill: none;
  stroke: none;
}

.zeroline {
  fill: none;
  stroke: #d3d3d3;
  shape-rendering: crispEdges;
  stroke-width: 1px;
}

.tooltip {
  position: absolute;
  width: 200px;
  height: 50px;
  pointer-events: none;  
}



</style>



<body>

<header>
<a href="http://brandonrose.org">Home</a>
</header>


<div class= "main">


<div id="hovertable">
<form>
  <label><input type="radio" name="mode" onchange="rungame(value)" value="Summer" checked> Summer</label>
  <label><input type="radio" name="mode" onchange="rungame(value)" value="Winter"> Winter</label>
</form>
</div>

<h1></h1>

<script type="text/javascript">


rungame("Summer")

function rungame(game) {

d3.selectAll("svg").data([]).exit().remove()
d3.selectAll("table").data([]).exit().remove()
d3.selectAll(".countrylab").data([]).exit().remove()

d3.selectAll("h1")
	.html(game + " Olympics");

console.log(game);

if (game == "Summer") 
{var scaleyears = [1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1996, 2000, 2004, 2008, 2012] 
var dataset = "data/simpleSummeroutput.csv"}
else
{var scaleyears = [1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1994, 1998, 2002, 2006, 2010, 2014] 
var dataset = "data/simpleWinteroutput.csv"}



d3.csv(dataset, function(error, data) {
	
  // change string (from CSV) into number format
  data.forEach(function(d) {
    d.Year = +d.Year;
    d.residuals = +d.residuals;
    d.CountryName = d.CountryName;
    d.TotalAdj = +d.TotalAdj;
    d.predicted = +d.predicted;
    d.residAdj	= d.TotalAdj - d.predicted
//    console.log(d);
  });




  
var margin = {top: 30, right: 20, bottom: 20, left: 10},
    width = 860 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

	
/* 
 * value accessor - returns the value to encode for a given data object.
 * scale - maps value to a visual display encoding, such as a pixel position.
 * map function - maps from data value to display value
 * axis - sets up axis
 */ 

// setup x 
var xValue = function(d) { return d.Year;}, // data -> value
    xScale = d3.scale.linear().range([0, width]), // value -> display
    xMap = function(d) { return xScale(xValue(d)) + (Math.round(Math.random() - 1) + Math.random())*10;}, // data -> display
    xAxis = d3.svg.axis()
    	.scale(xScale)
    	.orient("bottom")
		.tickValues(scaleyears)
		.tickFormat(d3.format(".0f"))
		.outerTickSize([0])
		.innerTickSize([8])
		.tickPadding([2]);
	xAxisdummy = d3.svg.axis()
    	.scale(xScale)
    	.orient("bottom")
		.tickValues(scaleyears)
		.outerTickSize([0])
		.innerTickSize([8])
		.tickPadding([2]);


		


// setup y
var yValue = function(d) { return d.residuals;}, // data -> value
    yScale = d3.scale.linear().range([height, 0]), // value -> display
    yMap = function(d) { return yScale(yValue(d)) + (Math.round(Math.random() - 1) + Math.random()) ;},
    yAxis = d3.svg.axis()
    	.scale(yScale)
    	.orient("left")
    	.tickValues([])
    	.tickFormat(d3.format(""))
    	.outerTickSize([0]);


     
// setup fill color
var cValue = function(d) { return d.residuals;},
    color = d3.scale.linear()
    .domain([80,10,0,-10, -60])
	.range(["#ffd700", "#ffd700", "#3C6880", "#C81010", "#C81010"]);
    //.domain([80,10,0,-10,-60])
	//.range(["#006d2c", "#238b45", "#bdbdbd", "#fc4e2a", "#bd0026"]);
	
// setup dot radius
var radiusValue = function(d) { return d.TotalAdj;},
    size = d3.scale.linear()
    .domain([0, d3.max(data, radiusValue)])
	.range([2.5, 25]);
	
// add the graph canvas to the body of the webpage
var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// add the tooltip area to the webpage
var tooltip = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);


 // don't want dots overlapping axis, so add in buffer to data domain
  xScale.domain([d3.min(data, xValue)-3, d3.max(data, xValue)+3]);
  yScale.domain([d3.min(data, yValue)-10, d3.max(data, yValue)+10]);


    // dummy x-axis to create second label
svg.append("g")
      .attr("class", "xdummy")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxisdummy)
 	  .transition()	
  	  .duration(750)
      .attr("x", width)
      .attr("y", -6);

  // x-axis
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
      .append("text")
      .attr("class", "label")
      .attr("x", width)
      .attr("y", -15)
      .attr("x", width - 30)
      .style("text-anchor", "end")
      .text("Year")
      .style("font-size", "16px");
      
      

      

	// zero-line
    svg.append("line")
    	.attr("class", "zeroline")
        .attr("x1", 0)
        .attr("x2", width)
        .attr("y1", yScale(0))	
        .attr("y2", yScale(0));

  // y-axis
  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
      .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 0)
      .attr("x", - height/2 + 8)
      .attr("dy", "0.71em")
      .style("text-anchor", "start")
      .text("Better than predicted")
      .style("fill", "#ffd700")
      .style("font-size", "16px");


      
      // dummy y-axis to create second label
 svg.append("g")
      .attr("class", "blank axis")
      .call(yAxis)
      .append("text")
      .attr("class", "label")
      .attr("transform", "rotate(-90)")
      .attr("y", 0)
      .attr("dy", "0.71em")
      .attr("x", - height/2 - 58 )
      .style("text-anchor", "end")
      .text("Worse than predicted")
      .style("fill", "#bd0026")
      .style("font-size", "16px");



var circlesnow = "United States"
var filtereddata = data.filter(function(d) { return d.CountryName == circlesnow ;})

var peopleTable = tabulate(filtereddata, ["Year","Gold", "Silver", "Bronze", "TotalAdj", "predicted", "residAdj"], circlesnow);

  // draw dots
  svg.selectAll(".dot")
      .data(data)
      .enter().append("circle")
      .style("fill", function(d) { return color(cValue(d));}) 
      .attr("class", function(d) { return d.CountryName.replace(' ','').replace(',', '');})
      // .transition()	
      // .duration(2750) 
      .attr("r", function(d) { return size(radiusValue(d));})
      .attr("cx", xMap)
      .attr("cy", yMap) 
      .attr("stroke", "#d3d3d3")
      .attr("stroke-width", "0.5px")
      .on("mouseover", function(d) {  		
      	 d3.selectAll("table").data([]).exit().remove()
      	 d3.selectAll("p.countrylab").data([]).exit().remove()
      	 var circlesnow =  d.CountryName;
          tooltip.transition()
               .duration(200)
               .style("opacity", .9);
          tooltip.html("<strong>" + d.CountryName + "</strong>" + "<br/> " + "Year: " + xValue(d) 
	        + "<br/>" + "Total Medals: " + d.TotalAdj + "<br/>" + "Predicted Medals: " 
	        + d.predicted)
               .style("left", (d3.event.pageX - 50) + "px")
               .style("top", (d3.event.pageY - 28) + "px")
               .style("font-size", "14px")

             var circleUnderMouse = this.getAttribute("class");
    			d3.selectAll('circle').transition().
    			style('opacity',function () {
        		return (this.getAttribute("class") === circleUnderMouse) ? 1 : 0.05;
    			})
    			.style('fill',function () {
        		return (this.getAttribute("class") === circleUnderMouse) ? "#377eb8" : function(d) { return color(cValue(d));};
    			});    		
  
  var filtereddata = data.filter(function(d) { return d.CountryName == circlesnow ;})

 console.log(circlesnow);
 
 var peopleTable = tabulate(filtereddata, ["Year","Gold", "Silver", "Bronze", "TotalAdj", "predicted", "residAdj"], circlesnow);



  
    			         
      })
      .on("mouseout", function(d) {
          tooltip.transition()
               .duration(500)
               .style("opacity", 0);
            d3.selectAll('circle').transition().style('opacity', 1)
            	.style("fill", function(d) { return color(cValue(d));}); 
      });


// insert table
function tabulate(data, columns, country) {
    var table = d3.select("#hovertable")
    		.append("p")
    		.attr("class", "countrylab")
    		.text(country)
    		.append("table")
            .attr("style", "margin-left: 0px"),
        thead = table.append("thead"),
        tbody = table.append("tbody")


    // append the header row
    thead.append("tr")
        .selectAll("th")
        .data(columns)
        .enter()
        .append("th")
            .text(function(column) { if (column == "Year") {return "Year";} else 
            	if (column == "Gold") {return "G" ;} else
           		if (column == "Silver") {return "S" ;} else
            	if (column == "Bronze") {return "B" ;} else
            	if (column == "TotalAdj") {return "Total Medals" ;} else
            	if (column == "predicted") {return "Predicted Medals" ;} else
            	if (column == "residAdj") {return "+ / -" ;} 
            	})

    // create a row for each object in the data
    var rows = tbody.selectAll("tr")
        .data(data)
        .enter()
        .append("tr");
	
    // create a cell in each row for each column
    var cells = rows.selectAll("td")
        .data(function(row) {
            return columns.map(function(column) {
               return {column: column, value: row[column]};
            });
        })
        .enter()
        .append("td")
            .html(function(d) { return d.value; })
            .attr("class", function(d) { return d.column ; })
    
    var boldit = function(d) { if (d > 0) { return "<b>" + "+" + d + "</b>";} else { return "<b>" + d + "</b>";} ;};
    	
    var resids = d3.selectAll("td.residAdj")
    	.html(function(d) { return boldit(d.value); })
    	.style("color", function(d) { return color(d.value);});
    	
    return table;
}

});
}



</script>

<div id="chart">

</div>

</div>

<div id="bottomtext">
<p>This is a visualization of participant countries' actual Olympic performance measured against
predicted performance estimated using GDP, population, and past performance. A full discussion of the 
underlying data and the model specifications can be found in my 
<a href="http://brandonrose.org/olympics">
<em>Cool Runnings Count</em>
</a>
write-up.</p>
</div>




</body>
</html>
